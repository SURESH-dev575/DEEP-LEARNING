import pandas as pd
import numpy as np
import re
from sklearn.model_selection import train_test_split
from sklearn.utils import resample
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional
import kagglehub
import os

# ---------------------- 1. LOAD AND PREPROCESS DATA ----------------------

print("\nLoading dataset from KaggleHub...")
data = kagglehub.dataset_download('snap/amazon-fine-food-reviews')
df_path = os.path.join(data, 'Reviews.csv')
data_set = pd.read_csv(df_path)

data = data_set[['Text', 'Score']]
data['Ratings'] = data['Score'].apply(lambda i: 0 if i in [1,2] else (1 if i in [4,5] else -1))
final_data = data[data['Ratings'] != -1]

# Balance dataset
neg_reviews = final_data[final_data['Ratings'] == 0]
pos_reviews = final_data[final_data['Ratings'] == 1]
pos_balanced = resample(pos_reviews, replace=False, n_samples=len(neg_reviews), random_state=42)
df_balanced = pd.concat([neg_reviews, pos_balanced])
df_balanced = df_balanced.sample(frac=1, random_state=42).reset_index(drop=True)

# Text cleaning
def clean_text(text):
    text = text.lower()
    text = re.sub(r'[^a-z\s]', '', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text

df_balanced['Text'] = df_balanced['Text'].apply(clean_text)

# ---------------------- 2. TOKENIZATION ----------------------

max_words = 10000
max_len = 100

x = df_balanced['Text'].values
y = df_balanced['Ratings'].values

tokenizer = Tokenizer(num_words=max_words, oov_token='<OOV>')
tokenizer.fit_on_texts(x)
x_seq = tokenizer.texts_to_sequences(x)
x_pad = pad_sequences(x_seq, maxlen=max_len, padding='post', truncating='post')

x_train, x_test, y_train, y_test = train_test_split(x_pad, y, test_size=0.2, stratify=y, random_state=42)

# ---------------------- 3. BUILD & TRAIN MODEL ----------------------

print("\nBuilding and training model...")

model = Sequential([
    Embedding(input_dim=max_words, output_dim=128, input_length=max_len),
    Bidirectional(LSTM(64, return_sequences=False)),
    Dropout(0.5),
    Dense(64, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()

history = model.fit(x_train, y_train, epochs=5, validation_split=0.2, batch_size=128, verbose=1)

# ---------------------- 4. PREDICT FUNCTION ----------------------

def predict_sentiment(text):
    cleaned = clean_text(text)
    seq = tokenizer.texts_to_sequences([cleaned])
    padded = pad_sequences(seq, maxlen=max_len, padding='post')
    pred = model.predict(padded)[0][0]

    if pred >= 0.6:
        sentiment = "Positive 😀"
    elif pred <= 0.4:
        sentiment = "Negative 😠"
    else:
        sentiment = "Neutral 😐"

    print(f"\nText: {text}")
    print(f"Sentiment: {sentiment}")
    print(f"Confidence Score: {pred:.4f}")

# ---------------------- 5. EXAMPLES ----------------------

predict_sentiment("Worst experience ever. Very bad.")
predict_sentiment("Absolutely fantastic product!")
predict_sentiment("It's okay, not bad not great.")
predict_sentiment("Very poor build quality. Will not recommend.")
predict_sentiment("Highly satisfied and impressed!")
