import pandas as pd
import numpy as np
import seaborn as sc
import matplotlib.pyplot as plt

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers,models,callbacks
from tensorflow.keras.layers import Dense

import kagglehub
import os
data  = kagglehub.dataset_download('snap/amazon-fine-food-reviews')
df = os.path.join(data,'Reviews.csv')
data_set = pd.read_csv(df)
data_set

data = data_set[['Text','Score']]
data

data['Ratings'] = data['Score'].apply(lambda i:0 if i in [1,2,3] else 1)

final_data = data[data['Score'] != 3]
final_data.size

neg_reviews = final_data[final_data['Ratings']==0]
pos_reviews  = final_data[final_data['Ratings']==1]

from sklearn.utils import resample

neg_size = len(neg_reviews)
pos_balanced = resample(pos_reviews,
                        replace=False,
                        n_samples = neg_size,
                        random_state=42)
print(neg_reviews.shape)
print(pos_reviews.shape)
print(pos_balanced.shape)

df_balanced = pd.concat([neg_reviews,pos_balanced])
df_balanced.reset_index(inplace=True)
df_balanced

import regex as re
def conv_text(text):
  text = text.lower()
  data = re.sub(r'^[A-Za-z\s]','',text)
  text = ' '.join(data.split())
  return text
df_balanced['Text'] = df_balanced['Text'].apply(conv_text)

df_balanced.drop('index',axis=1,inplace=True)

df_balanced

#vocabluray
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

max_words  = 1000
max_range = 100

#tocinisation
x= df_balanced['Text'].values
y = df_balanced['Ratings'].values

tokinizer = Tokenizer(max_words,oov_token='<OOV>')
tokinizer.fit_on_texts(x)

x_sequnces = tokinizer.texts_to_sequences(x)

print(x_sequnces[0])

x_sequences = pad_sequences(x_sequnces,maxlen=max_words,padding='post',truncating='post')

x_sequences[0]

print(x[0][:100])
print(x_sequences[0][:20])

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(
    x_sequences,y,test_size=0.2,stratify=y,random_state=42
)

# from collections.abc import Sequence

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Embedding,SimpleRNN,Dropout
def create_rnn_model():
  model = Sequential([
      Embedding(input_dim=max_words,output_dim=128, input_length=max_words),
      SimpleRNN(units=64,return_sequences=False),
      Dropout(0.5),
      Dense(64,activation='relu'),
      Dense(32,activation='softmax')
  ])
  return model

model = create_rnn_model()

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

model.summary()

history = model.fit(x_train,y_train,epochs=5,verbose=1,validation_split=0.2,batch_size=128)

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Example new input
new_texts = ["this movie was fantastic and emotional"]

# Tokenize and pad just like you did for training
new_seq = tokinizer .texts_to_sequences(new_texts)
new_padded = pad_sequences(new_seq, maxlen=max_words, padding='post')
print(new_padded)
prediction = model.predict(new_padded)
print(prediction)
