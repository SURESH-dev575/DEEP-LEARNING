print('WOKING ON REAL LIFE EXAMPLES')

url = 'https://raw.githubusercontent.com/IBM/telco-customer-churn-on-icp4d/master/data/Telco-Customer-Churn.csv'
df = pd.read_csv(url)
df.shape
print('WOKING ON REAL LIFE EXAMPLES')
WOKING ON REAL LIFE EXAMPLES

pd.set_option('display.max_columns',None)

df.columns

data = df[['gender','MonthlyCharges','TotalCharges','tenure','Churn']]
data

data.info()


data['TotalCharges'] = pd.to_numeric(data['TotalCharges'], errors='coerce')

data['gender'] = df['gender'].map({'Female':0,'Male':1})
data['Churn'] = df['Churn'].map({'Yes':1,'No':0})
data.dropna(inplace=True)

data

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers,models

x = data[['gender'	,'MonthlyCharges'	,'TotalCharges'	,'tenure']]
y= data['Churn']

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)
sc = StandardScaler()
x_trina_scalar = sc.fit_transform(x_train)
x_test_scalar = sc.transform(x_test)


model = models.Sequential([
    layers.Dense(64, activation='relu', input_shape=(4,)), #HL1+IP
    layers.Dense(32, activation='relu'), #HL2
    layers.Dense(16, activation='relu'), #HL3
    layers.Dense(8, activation='relu'), #HL4
    layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

history = model.fit(x_trina_scalar,y_train,epochs=100,validation_split=0.2,verbose=1)

plt.plot(history.history['loss'])

model.evaluate(x_test_scalar,y_test)
